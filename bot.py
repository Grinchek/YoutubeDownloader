import asyncio
import os
import re
import tempfile
from dataclasses import dataclass
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

import yt_dlp

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # e.g. @my_channel
CHANNEL_ID = os.getenv("CHANNEL_ID")  # optional numeric id as string

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN in .env")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# ---- Config ----
TELEGRAM_BOT_FILE_LIMIT_MB = 48  # –æ–±–º–µ–∂–∏–º–æ—Å—è ~48–ú–ë, —â–æ–± —É–Ω–∏–∫–∞—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
SUPPORTED_URL_RE = re.compile(
    r"(https?://(www\.)?(youtube\.com|youtu\.be|tiktok\.com)/[^\s]+)",
    re.IGNORECASE
)

# ---- Models ----
@dataclass
class PendingJob:
    url: str
    user_id: int


# –ü—Ä–æ—Å—Ç–µ–Ω—å–∫–µ —Å—Ö–æ–≤–∏—â–µ –æ—á—ñ–∫—É—é—á–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å (–≤ –ø–∞–º'—è—Ç—ñ)
pending: dict[int, PendingJob] = {}  # key: user_id


# ---- Utils ----
async def is_subscribed(user_id: int) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–±–æ CHANNEL_USERNAME, –∞–±–æ CHANNEL_ID.
    """
    if not CHANNEL_USERNAME and not CHANNEL_ID:
        # —è–∫—â–æ –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –≤–≤–∞–∂–∞—Ç–∏–º–µ–º–æ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é
        return True

    chat = CHANNEL_USERNAME or int(CHANNEL_ID)  # str @name –∞–±–æ int id

    try:
        member = await bot.get_chat_member(chat_id=chat, user_id=user_id)
        status = getattr(member, "status", None)
        # subscribed if member, administrator, creator
        return status in ("member", "administrator", "creator")
    except Exception:
        # –Ø–∫—â–æ –±–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–±–æ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω–∏–π ‚Äî –Ω–µ –ø—Ä–æ–π–¥–µ.
        return False


def human_size(bytes_count: int) -> str:
    units = ["B", "KB", "MB", "GB"]
    size = float(bytes_count)
    for u in units:
        if size < 1024 or u == "GB":
            return f"{size:.1f}{u}"
        size /= 1024


def build_main_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üé¨ –í—ñ–¥–µ–æ (–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å)", callback_data="fmt:best")
    kb.button(text="üé• –í—ñ–¥–µ–æ 720p (MP4)", callback_data="fmt:720")
    kb.button(text="üì± –í—ñ–¥–µ–æ 360p (MP4)", callback_data="fmt:360")
    kb.button(text="üéß –ê—É–¥—ñ–æ (MP3)", callback_data="fmt:audio")
    kb.adjust(1)
    return kb.as_markup()


def ydl_opts_for_choice(choice: str, out_dir: str) -> dict:
    common = {
        "outtmpl": os.path.join(out_dir, "%(title).100s.%(ext)s"),
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "restrictfilenames": True,
    }
    if choice == "best":
        # –ù–∞–π–∫—Ä–∞—â–∞ —Å—É–º—ñ—Å–Ω–∞ –∑ —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—è —á–∞—Å—Ç–æ mp4/mkv
        return {
            **common,
            "format": "bv*+ba/b",  # bestvideo+audio, fallback best
            "merge_output_format": "mp4",
        }
    if choice == "720":
        # —Å–ø—Ä–æ–±–∞ –≤–∑—è—Ç–∏ mp4 720p
        return {
            **common,
            "format": "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best",
            "merge_output_format": "mp4",
        }
    if choice == "360":
        return {
            **common,
            "format": "bestvideo[height<=360][ext=mp4]+bestaudio[ext=m4a]/best[height<=360][ext=mp4]/best",
            "merge_output_format": "mp4",
        }
    if choice == "audio":
        return {
            **common,
            "format": "bestaudio/best",
            "postprocessors": [
                {"key": "FFmpegExtractAudio", "preferredcodec": "mp3", "preferredquality": "192"}
            ],
        }
    # fallback
    return common


def pick_first_file(directory: str) -> Path | None:
    files = sorted(Path(directory).glob("*"))
    return files[0] if files else None


# ---- Handlers ----
@dp.message(CommandStart())
async def on_start(message: Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –∑–∞–≤–∞–Ω—Ç–∞–∂—É –≤—ñ–¥–µ–æ –∑ <b>YouTube</b>.\n"
        "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∞ –ø–æ—Ç—ñ–º –æ–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç.\n\n"
        "–ü–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —è –ø–µ—Ä–µ–≤—ñ—Ä—é –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )
    if CHANNEL_USERNAME or CHANNEL_ID:
        ch_display = CHANNEL_USERNAME or f"ID {CHANNEL_ID}"
        text += f"\n\n–û–±–æ–≤ º—è–∑–∫–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: <b>{ch_display}</b>"
    await message.answer(text)


@dp.message(F.text.regexp(SUPPORTED_URL_RE))
async def on_url(message: Message):
    url = SUPPORTED_URL_RE.search(message.text).group(1)
    user_id = message.from_user.id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç
    pending[user_id] = PendingJob(url=url, user_id=user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
    if not await is_subscribed(user_id):
        subscribe_hint = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —ñ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏.\n"
            "–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –±—É–¥—å-—è–∫—É –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚§µÔ∏è"
        )
        # –î–∞–º–æ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–æ–≤—É¬ª
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check:sub")
        if CHANNEL_USERNAME:
            kb.button(text="üì£ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")
        kb.adjust(1)
        await message.answer(subscribe_hint, reply_markup=kb.as_markup())
        return

    await message.answer(
        f"–û—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n<code>{url}</code>\n–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
        reply_markup=build_main_menu()
    )


@dp.callback_query(F.data == "check:sub")
async def on_check_sub(call: CallbackQuery):
    user_id = call.from_user.id
    ok = await is_subscribed(user_id)
    if ok:
        await call.message.edit_text(
            "–ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ\n–û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:",
            reply_markup=build_main_menu()
        )
    else:
        await call.answer("–©–µ –Ω–µ –±–∞—á—É –ø—ñ–¥–ø–∏—Å–∫–∏ üôÉ", show_alert=True)


@dp.callback_query(F.data.startswith("fmt:"))
async def on_format_selected(call: CallbackQuery):
    user_id = call.from_user.id
    job = pending.get(user_id)
    if not job:
        await call.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ URL —â–µ —Ä–∞–∑.", show_alert=True)
        return

    # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Ä–æ–∑–ø–∏—Å–∞–ª–∏—Å—å –ø—ñ—Å–ª—è –º–µ–Ω—é
    if not await is_subscribed(user_id):
        await call.answer("–°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üôè", show_alert=True)
        return

    choice = call.data.split(":", 1)[1]
    url = job.url
    YouTubevideoDownloader="@YouTubevideoDownloaderNewbot"

    await call.message.edit_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é... (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É)")

    with tempfile.TemporaryDirectory() as tmpdir:
        ydl_opts = ydl_opts_for_choice(choice, tmpdir)

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: <code>{e}</code>")
            return

        file_path = pick_first_file(tmpdir)
        if not file_path or not file_path.exists():
            await call.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
            return

        size = file_path.stat().st_size
        if size > TELEGRAM_BOT_FILE_LIMIT_MB * 1024 * 1024:
            # –ó–∞–≤–µ–ª–∏–∫–∏–π –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±–æ—Ç–æ–º: –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è
            title = info.get("title") or file_path.stem
            await call.message.edit_text(
                "‚ö†Ô∏è –§–∞–π–ª –≤–∏–π—à–æ–≤ –∑–∞–≤–µ–ª–∏–∫–∏–º –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n"
                "–°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∏–∂—á–∞ —è–∫—ñ—Å—Ç—å –∞–±–æ –∞—É–¥—ñ–æ), –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –ø—Ä—è–º–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.\n\n"
                f"<b>–ù–∞–∑–≤–∞:</b> {title}\n<b>–†–æ–∑–º—ñ—Ä:</b> {human_size(size)}"
            )
            return

        caption = f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑: {YouTubevideoDownloader}"

        try:
            if choice == "audio" or file_path.suffix.lower() in {".mp3", ".m4a"}:
                await bot.send_audio(
                    chat_id=call.message.chat.id,
                    audio=FSInputFile(str(file_path)),   # <-- —Ç—É—Ç
                    caption=caption,
                    title=info.get("title"),
                    performer=info.get("uploader")
                )
            else:
                await bot.send_video(
                    chat_id=call.message.chat.id,
                    video=FSInputFile(str(file_path)),   # <-- —ñ —Ç—É—Ç
                    caption=caption,
                    supports_streaming=True
                )

            await call.message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥—ñ—Å–ª–∞–≤ —Ñ–∞–π–ª –≤–∏—â–µ.")
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É: <code>{e}</code>")


@dp.message()
async def on_other(message: Message):
    await message.reply(
        "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ YouTube \n"
        "–ü—Ä–∏–∫–ª–∞–¥: https://youtu.be/dQw4w9WgXcQ"
    )


async def main():
    print("Bot is running...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


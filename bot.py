import asyncio
import os
import re
import tempfile
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Tuple, List, Dict, Any

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import yt_dlp

# -------------------- ENV --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
CHANNEL_ID = os.getenv("CHANNEL_ID")
YT_COOKIES_FILE = os.getenv("YT_COOKIES_FILE")

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN in .env")

# -------------------- BOT CORE --------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

TELEGRAM_BOT_FILE_LIMIT_MB = 48
SUPPORTED_URL_RE = re.compile(
    r"(https?://(?:www\.)?(?:youtube\.com|youtu\.be|tiktok\.com)/\S+)",
    re.IGNORECASE,
)

@dataclass
class PendingJob:
    url: str
    user_id: int

pending: dict[int, PendingJob] = {}


# -------------------- HELPERS --------------------
async def is_subscribed(user_id: int) -> bool:
    if not CHANNEL_USERNAME and not CHANNEL_ID:
        return True
    chat = CHANNEL_USERNAME or int(CHANNEL_ID)
    try:
        m = await bot.get_chat_member(chat_id=chat, user_id=user_id)
        return getattr(m, "status", None) in ("member", "administrator", "creator")
    except Exception:
        return False


def human_size(n: int) -> str:
    size, units = float(n), ["B", "KB", "MB", "GB"]
    for u in units:
        if size < 1024 or u == "GB":
            return f"{size:.1f}{u}"
        size /= 1024


def build_main_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üé¨ –í—ñ–¥–µ–æ (–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å)", callback_data="fmt:best")
    kb.button(text="üé• –í—ñ–¥–µ–æ 720p", callback_data="fmt:720")
    kb.button(text="üì± –í—ñ–¥–µ–æ 360p", callback_data="fmt:360")
    kb.button(text="üéß –ê—É–¥—ñ–æ (MP3)", callback_data="fmt:audio")
    kb.adjust(1)
    return kb.as_markup()


# -------- yt-dlp options (PROBE vs DOWNLOAD) --------
def _common_opts(out_dir: str, player_client: str) -> dict:
    opts = {
        "outtmpl": os.path.join(out_dir, "%(title).100s.%(ext)s"),
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "restrictfilenames": True,
        # –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–≥–Ω–æ—Ä—É—î–º–æ –±—É–¥—å-—è–∫—ñ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥–∏/alias/—è—Ä–ª–∏–∫–∏
        "ignoreconfig": True,      # --ignore-config
        "config_locations": [],    # –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–µ—Å—å –∑–∞–¥–∞–Ω—ñ
        # –æ–±—Ä–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç YouTube
        "extractor_args": {"youtube": {"player_client": [player_client]}},
        # –ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –º–µ—Ä–µ–∂–µ–≤–∏—Ö —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ–π
        "retries": 2,
        "fragment_retries": 2,
        "socket_timeout": 15,
    }
    if YT_COOKIES_FILE and os.path.exists(YT_COOKIES_FILE):
        opts["cookiefile"] = YT_COOKIES_FILE
    return opts


def ydl_probe_opts(out_dir: str, player_client: str) -> dict:
    return {
        **_common_opts(out_dir, player_client),
        "skip_download": True,  # –∫–ª—é—á–æ–≤–µ: —Ç—ñ–ª—å–∫–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ
        # –ù–Ü–Ø–ö–ò–• format/postprocessors/merge_output_format —Ç—É—Ç!
    }


def ydl_download_opts(out_dir: str, fmt_string: str, choice: str, player_client: str) -> dict:
    opts = {
        **_common_opts(out_dir, player_client),
        "format": fmt_string,
        "merge_output_format": "mp4",
        "postprocessors": [
            {"key": "FFmpegVideoRemuxer", "preferedformat": "mp4"},  # (—Ç–∞–∫, —Å–∞–º–µ preferedformat)
        ],
    }
    if choice == "audio":
        opts["postprocessors"].append(
            {"key": "FFmpegExtractAudio", "preferredcodec": "mp3", "preferredquality": "192"}
        )
    return opts


# -------- –ø—ñ–¥–±—ñ—Ä —Ä–µ–∞–ª—å–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ --------
def _best_by(items: List[Dict[str, Any]], keys: List[str], reverse: bool = True):
    def k(f: Dict[str, Any]):
        vals = []
        for key in keys:
            v = f.get(key)
            if v is None:
                v = -1 if reverse else 10**12
            vals.append(v)
        return tuple(vals)
    return sorted(items, key=k, reverse=reverse)[0] if items else None


def pick_format_string(info: Dict[str, Any], choice: str) -> Tuple[str, str]:
    fmts: List[Dict[str, Any]] = info.get("formats") or []
    if not fmts:
        raise RuntimeError("No formats list from extractor")

    progressive = [f for f in fmts if f.get("vcodec") != "none" and f.get("acodec") != "none"]
    video_only  = [f for f in fmts if f.get("vcodec") != "none" and (f.get("acodec") in (None, "none"))]
    audio_only  = [f for f in fmts if f.get("acodec") != "none" and (f.get("vcodec") in (None, "none"))]

    def best_prog(max_h: Optional[int] = None):
        arr = progressive
        if max_h is not None:
            arr = [f for f in arr if (f.get("height") or 0) <= max_h or f.get("height") is None]
        mp4 = [f for f in arr if f.get("ext") == "mp4"]
        return _best_by(mp4, ["height", "tbr"]) or _best_by(arr, ["height", "tbr"])

    def best_vo(max_h: Optional[int] = None):
        arr = video_only
        if max_h is not None:
            arr = [f for f in arr if (f.get("height") or 0) <= max_h or f.get("height") is None]
        return _best_by(arr, ["height", "tbr"])

    def best_ao():
        m4a = [f for f in audio_only if f.get("ext") in ("m4a", "mp4")]
        return _best_by(m4a, ["abr", "tbr"]) or _best_by(audio_only, ["abr", "tbr"])

    if choice == "audio":
        a = best_ao()
        if a:
            return a["format_id"], f"audio-only {a.get('ext')} ~{a.get('abr') or a.get('tbr')}kbps"
        p = best_prog()
        if p:
            return p["format_id"], f"progressive {p.get('ext')} (extract audio)"
        raise RuntimeError("No audio format available")

    limit = 720 if choice == "720" else (360 if choice == "360" else None)

    p = best_prog(limit)
    if p:
        return p["format_id"], f"progressive {p.get('ext')} {p.get('height', '?')}p"

    v = best_vo(limit) or best_vo(None)
    a = best_ao()
    if v and a:
        return f"{v['format_id']}+{a['format_id']}", f"mux {v.get('height','?')}p + {a.get('ext')}"

    p = best_prog()
    if p:
        return p["format_id"], f"progressive {p.get('ext')} {p.get('height','?')}p"

    any_id = (fmts[-1] or {}).get("format_id")
    if any_id:
        return any_id, "fallback single"
    raise RuntimeError("No suitable format found")


def pick_first_file(directory: str) -> Optional[Path]:
    files = sorted(Path(directory).glob("*"))
    return files[0] if files else None


# -------- multi-probe (web -> android) --------
def probe_info(url: str, out_dir: str) -> Tuple[Dict[str, Any], str]:
    """
    –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ 'web' –∫–ª—ñ—î–Ω—Ç (–Ω–∞–π–ø–æ–≤–Ω—ñ—à–∞ –º–∞—Ç—Ä–∏—Ü—è —Ñ–æ—Ä–º–∞—Ç—ñ–≤),
    —è–∫—â–æ –ø–∞–¥–∞—î ‚Äî –ø—Ä–æ–±—É—î–º–æ 'android'. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ (info, used_client).
    """
    last_err: Exception | None = None
    for client in ("web", "android"):
        try:
            with yt_dlp.YoutubeDL(ydl_probe_opts(out_dir, client)) as ydl:
                info = ydl.extract_info(url, download=False)
            return info, client
        except Exception as e:
            last_err = e
            # –π–¥–µ–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
    raise last_err or RuntimeError("probe failed")


# -------------------- HANDLERS --------------------
@dp.message(CommandStart())
async def on_start(message: Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –∑–∞–≤–∞–Ω—Ç–∞–∂—É –≤—ñ–¥–µ–æ –∑ <b>YouTube</b> –∞–±–æ <b>TikTok</b>.\n"
        "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∞ –ø–æ—Ç—ñ–º –æ–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç.\n\n"
        "–ü–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —è –ø–µ—Ä–µ–≤—ñ—Ä—é –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )
    if CHANNEL_USERNAME or CHANNEL_ID:
        ch = CHANNEL_USERNAME or f"ID {CHANNEL_ID}"
        text += f"\n\n–û–±–æ–≤ º—è–∑–∫–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: <b>{ch}</b>"
    await message.answer(text)


@dp.message(F.text.regexp(SUPPORTED_URL_RE))
async def on_url(message: Message):
    m = SUPPORTED_URL_RE.search(message.text or "")
    if not m:
        return
    url = m.group(1)
    user_id = message.from_user.id

    pending[user_id] = PendingJob(url=url, user_id=user_id)

    if not await is_subscribed(user_id):
        hint = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —ñ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏.\n"
            "–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚§µÔ∏è"
        )
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check:sub")
        if CHANNEL_USERNAME:
            kb.button(text="üì£ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–Ω–∞–ª", url=f"https://t.me/{(CHANNEL_USERNAME or '').lstrip('@')}")
        kb.adjust(1)
        await message.answer(hint, reply_markup=kb.as_markup())
        return

    await message.answer(
        f"–û—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n<code>{url}</code>\n–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
        reply_markup=build_main_menu(),
    )


@dp.callback_query(F.data == "check:sub")
async def on_check_sub(call: CallbackQuery):
    if await is_subscribed(call.from_user.id):
        await call.message.edit_text("–ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ\n–û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=build_main_menu())
    else:
        await call.answer("–©–µ –Ω–µ –±–∞—á—É –ø—ñ–¥–ø–∏—Å–∫–∏ üôÉ", show_alert=True)


@dp.callback_query(F.data.startswith("fmt:"))
async def on_format_selected(call: CallbackQuery):
    user_id = call.from_user.id
    job = pending.get(user_id)
    if not job:
        await call.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ URL —â–µ —Ä–∞–∑.", show_alert=True)
        return
    if not await is_subscribed(user_id):
        await call.answer("–°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üôè", show_alert=True)
        return

    choice = call.data.split(":", 1)[1]
    url = job.url

    await call.message.edit_text("‚è≥ –ì–æ—Ç—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")

    with tempfile.TemporaryDirectory() as tmpdir:
        # 1) –ü–†–û–ë–ê (web -> android), –ø–æ–≤–Ω–∏–π —ñ–≥–Ω–æ—Ä –∫–æ–Ω—Ñ—ñ–≥—ñ–≤
        try:
            info, client = probe_info(url, tmpdir)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ: <code>{e}</code>")
            return

        # 2) —Ä–µ–∞–ª—å–Ω–∏–π –ø—ñ–¥–±—ñ—Ä format_id
        try:
            fmt_string, note = pick_format_string(info, choice)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç: <code>{e}</code>")
            return

        await call.message.edit_text(f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é ({note}, client={client})...")

        # 3) –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        try:
            with yt_dlp.YoutubeDL(ydl_download_opts(tmpdir, fmt_string, choice, client)) as ydl:
                info2 = ydl.extract_info(url, download=True)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: <code>{e}</code>")
            return

        file_path = pick_first_file(tmpdir)
        if not file_path or not file_path.exists():
            await call.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
            return

        size = file_path.stat().st_size
        if size > TELEGRAM_BOT_FILE_LIMIT_MB * 1024 * 1024:
            title = (info2 or {}).get("title") or file_path.stem
            await call.message.edit_text(
                "‚ö†Ô∏è –§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n"
                "–°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∏–∂—á–∞ —è–∫—ñ—Å—Ç—å –∞–±–æ –∞—É–¥—ñ–æ).\n\n"
                f"<b>–ù–∞–∑–≤–∞:</b> {title}\n<b>–†–æ–∑–º—ñ—Ä:</b> {human_size(size)}\n"
                f"<b>–§–æ—Ä–º–∞—Ç:</b> {note}"
            )
            return

        caption = f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑: {url}\n<b>–§–æ—Ä–º–∞—Ç:</b> {note}"
        try:
            if choice == "audio" or file_path.suffix.lower() in {".mp3", ".m4a"}:
                await bot.send_audio(
                    chat_id=call.message.chat.id,
                    audio=FSInputFile(str(file_path)),
                    caption=caption,
                    title=(info2 or {}).get("title"),
                    performer=(info2 or {}).get("uploader"),
                )
            else:
                await bot.send_video(
                    chat_id=call.message.chat.id,
                    video=FSInputFile(str(file_path)),
                    caption=caption,
                    supports_streaming=True,
                )
            await call.message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥—ñ—Å–ª–∞–≤ —Ñ–∞–π–ª –≤–∏—â–µ.")
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É: <code>{e}</code>")

import asyncio
import os
import re
import tempfile
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Tuple, List, Dict, Any

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import yt_dlp

# -------------------- ENV --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
CHANNEL_ID = os.getenv("CHANNEL_ID")
YT_COOKIES_FILE = os.getenv("YT_COOKIES_FILE")

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN in .env")

# -------------------- BOT CORE --------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

TELEGRAM_BOT_FILE_LIMIT_MB = 48
SUPPORTED_URL_RE = re.compile(
    r"(https?://(?:www\.)?(?:youtube\.com|youtu\.be|tiktok\.com)/\S+)",
    re.IGNORECASE,
)

@dataclass
class PendingJob:
    url: str
    user_id: int

pending: dict[int, PendingJob] = {}


# -------------------- HELPERS --------------------
async def is_subscribed(user_id: int) -> bool:
    if not CHANNEL_USERNAME and not CHANNEL_ID:
        return True
    chat = CHANNEL_USERNAME or int(CHANNEL_ID)
    try:
        m = await bot.get_chat_member(chat_id=chat, user_id=user_id)
        return getattr(m, "status", None) in ("member", "administrator", "creator")
    except Exception:
        return False


def human_size(n: int) -> str:
    size, units = float(n), ["B", "KB", "MB", "GB"]
    for u in units:
        if size < 1024 or u == "GB":
            return f"{size:.1f}{u}"
        size /= 1024


def build_main_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üé¨ –í—ñ–¥–µ–æ (–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å)", callback_data="fmt:best")
    kb.button(text="üé• –í—ñ–¥–µ–æ 720p", callback_data="fmt:720")
    kb.button(text="üì± –í—ñ–¥–µ–æ 360p", callback_data="fmt:360")
    kb.button(text="üéß –ê—É–¥—ñ–æ (MP3)", callback_data="fmt:audio")
    kb.adjust(1)
    return kb.as_markup()


# -------- yt-dlp options (PROBE vs DOWNLOAD) --------
def _common_opts(out_dir: str, player_client: str) -> dict:
    opts = {
        "outtmpl": os.path.join(out_dir, "%(title).100s.%(ext)s"),
        "noplaylist": True,
        "quiet": True,
        "no_warnings": True,
        "restrictfilenames": True,
        # –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–≥–Ω–æ—Ä—É—î–º–æ –±—É–¥—å-—è–∫—ñ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥–∏/alias/—è—Ä–ª–∏–∫–∏
        "ignoreconfig": True,      # --ignore-config
        "config_locations": [],    # –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –¥–µ—Å—å –∑–∞–¥–∞–Ω—ñ
        # –æ–±—Ä–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç YouTube
        "extractor_args": {"youtube": {"player_client": [player_client]}},
        # –ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –º–µ—Ä–µ–∂–µ–≤–∏—Ö —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ–π
        "retries": 2,
        "fragment_retries": 2,
        "socket_timeout": 15,
    }
    if YT_COOKIES_FILE and os.path.exists(YT_COOKIES_FILE):
        opts["cookiefile"] = YT_COOKIES_FILE
    return opts


def ydl_probe_opts(out_dir: str, player_client: str) -> dict:
    return {
        **_common_opts(out_dir, player_client),
        "skip_download": True,  # –∫–ª—é—á–æ–≤–µ: —Ç—ñ–ª—å–∫–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ
        # –ù–Ü–Ø–ö–ò–• format/postprocessors/merge_output_format —Ç—É—Ç!
    }


def ydl_download_opts(out_dir: str, fmt_string: str, choice: str, player_client: str) -> dict:
    opts = {
        **_common_opts(out_dir, player_client),
        "format": fmt_string,
        "merge_output_format": "mp4",
        "postprocessors": [
            {"key": "FFmpegVideoRemuxer", "preferedformat": "mp4"},  # (—Ç–∞–∫, —Å–∞–º–µ preferedformat)
        ],
    }
    if choice == "audio":
        opts["postprocessors"].append(
            {"key": "FFmpegExtractAudio", "preferredcodec": "mp3", "preferredquality": "192"}
        )
    return opts


# -------- –ø—ñ–¥–±—ñ—Ä —Ä–µ–∞–ª—å–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ --------
def _best_by(items: List[Dict[str, Any]], keys: List[str], reverse: bool = True):
    def k(f: Dict[str, Any]):
        vals = []
        for key in keys:
            v = f.get(key)
            if v is None:
                v = -1 if reverse else 10**12
            vals.append(v)
        return tuple(vals)
    return sorted(items, key=k, reverse=reverse)[0] if items else None


def pick_format_string(info: Dict[str, Any], choice: str) -> Tuple[str, str]:
    fmts: List[Dict[str, Any]] = info.get("formats") or []
    if not fmts:
        raise RuntimeError("No formats list from extractor")

    progressive = [f for f in fmts if f.get("vcodec") != "none" and f.get("acodec") != "none"]
    video_only  = [f for f in fmts if f.get("vcodec") != "none" and (f.get("acodec") in (None, "none"))]
    audio_only  = [f for f in fmts if f.get("acodec") != "none" and (f.get("vcodec") in (None, "none"))]

    def best_prog(max_h: Optional[int] = None):
        arr = progressive
        if max_h is not None:
            arr = [f for f in arr if (f.get("height") or 0) <= max_h or f.get("height") is None]
        mp4 = [f for f in arr if f.get("ext") == "mp4"]
        return _best_by(mp4, ["height", "tbr"]) or _best_by(arr, ["height", "tbr"])

    def best_vo(max_h: Optional[int] = None):
        arr = video_only
        if max_h is not None:
            arr = [f for f in arr if (f.get("height") or 0) <= max_h or f.get("height") is None]
        return _best_by(arr, ["height", "tbr"])

    def best_ao():
        m4a = [f for f in audio_only if f.get("ext") in ("m4a", "mp4")]
        return _best_by(m4a, ["abr", "tbr"]) or _best_by(audio_only, ["abr", "tbr"])

    if choice == "audio":
        a = best_ao()
        if a:
            return a["format_id"], f"audio-only {a.get('ext')} ~{a.get('abr') or a.get('tbr')}kbps"
        p = best_prog()
        if p:
            return p["format_id"], f"progressive {p.get('ext')} (extract audio)"
        raise RuntimeError("No audio format available")

    limit = 720 if choice == "720" else (360 if choice == "360" else None)

    p = best_prog(limit)
    if p:
        return p["format_id"], f"progressive {p.get('ext')} {p.get('height', '?')}p"

    v = best_vo(limit) or best_vo(None)
    a = best_ao()
    if v and a:
        return f"{v['format_id']}+{a['format_id']}", f"mux {v.get('height','?')}p + {a.get('ext')}"

    p = best_prog()
    if p:
        return p["format_id"], f"progressive {p.get('ext')} {p.get('height','?')}p"

    any_id = (fmts[-1] or {}).get("format_id")
    if any_id:
        return any_id, "fallback single"
    raise RuntimeError("No suitable format found")


def pick_first_file(directory: str) -> Optional[Path]:
    files = sorted(Path(directory).glob("*"))
    return files[0] if files else None


# -------- multi-probe (web -> android) --------
def probe_info(url: str, out_dir: str) -> Tuple[Dict[str, Any], str]:
    """
    –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ 'web' –∫–ª—ñ—î–Ω—Ç (–Ω–∞–π–ø–æ–≤–Ω—ñ—à–∞ –º–∞—Ç—Ä–∏—Ü—è —Ñ–æ—Ä–º–∞—Ç—ñ–≤),
    —è–∫—â–æ –ø–∞–¥–∞—î ‚Äî –ø—Ä–æ–±—É—î–º–æ 'android'. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ (info, used_client).
    """
    last_err: Exception | None = None
    for client in ("web", "android"):
        try:
            with yt_dlp.YoutubeDL(ydl_probe_opts(out_dir, client)) as ydl:
                info = ydl.extract_info(url, download=False)
            return info, client
        except Exception as e:
            last_err = e
            # –π–¥–µ–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
    raise last_err or RuntimeError("probe failed")


# -------------------- HANDLERS --------------------
@dp.message(CommandStart())
async def on_start(message: Message):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –∑–∞–≤–∞–Ω—Ç–∞–∂—É –≤—ñ–¥–µ–æ –∑ <b>YouTube</b> –∞–±–æ <b>TikTok</b>.\n"
        "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∞ –ø–æ—Ç—ñ–º –æ–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç.\n\n"
        "–ü–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —è –ø–µ—Ä–µ–≤—ñ—Ä—é –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."
    )
    if CHANNEL_USERNAME or CHANNEL_ID:
        ch = CHANNEL_USERNAME or f"ID {CHANNEL_ID}"
        text += f"\n\n–û–±–æ–≤ º—è–∑–∫–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: <b>{ch}</b>"
    await message.answer(text)


@dp.message(F.text.regexp(SUPPORTED_URL_RE))
async def on_url(message: Message):
    m = SUPPORTED_URL_RE.search(message.text or "")
    if not m:
        return
    url = m.group(1)
    user_id = message.from_user.id

    pending[user_id] = PendingJob(url=url, user_id=user_id)

    if not await is_subscribed(user_id):
        hint = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —ñ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏.\n"
            "–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ ‚§µÔ∏è"
        )
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check:sub")
        if CHANNEL_USERNAME:
            kb.button(text="üì£ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–Ω–∞–ª", url=f"https://t.me/{(CHANNEL_USERNAME or '').lstrip('@')}")
        kb.adjust(1)
        await message.answer(hint, reply_markup=kb.as_markup())
        return

    await message.answer(
        f"–û—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n<code>{url}</code>\n–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
        reply_markup=build_main_menu(),
    )


@dp.callback_query(F.data == "check:sub")
async def on_check_sub(call: CallbackQuery):
    if await is_subscribed(call.from_user.id):
        await call.message.edit_text("–ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ\n–û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç:", reply_markup=build_main_menu())
    else:
        await call.answer("–©–µ –Ω–µ –±–∞—á—É –ø—ñ–¥–ø–∏—Å–∫–∏ üôÉ", show_alert=True)


@dp.callback_query(F.data.startswith("fmt:"))
async def on_format_selected(call: CallbackQuery):
    user_id = call.from_user.id
    job = pending.get(user_id)
    if not job:
        await call.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ù–∞–¥—ñ—à–ª–∏ URL —â–µ —Ä–∞–∑.", show_alert=True)
        return
    if not await is_subscribed(user_id):
        await call.answer("–°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üôè", show_alert=True)
        return

    choice = call.data.split(":", 1)[1]
    url = job.url
    bot = "@YouTubevideoDownloaderNewbot"

    await call.message.edit_text("‚è≥ –ì–æ—Ç—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")

    with tempfile.TemporaryDirectory() as tmpdir:
        # 1) –ü–†–û–ë–ê (web -> android), –ø–æ–≤–Ω–∏–π —ñ–≥–Ω–æ—Ä –∫–æ–Ω—Ñ—ñ–≥—ñ–≤
        try:
            info, client = probe_info(url, tmpdir)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ: <code>{e}</code>")
            return

        # 2) —Ä–µ–∞–ª—å–Ω–∏–π –ø—ñ–¥–±—ñ—Ä format_id
        try:
            fmt_string, note = pick_format_string(info, choice)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç: <code>{e}</code>")
            return

        await call.message.edit_text(f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é ({note}, client={client})...")

        # 3) –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        try:
            with yt_dlp.YoutubeDL(ydl_download_opts(tmpdir, fmt_string, choice, client)) as ydl:
                info2 = ydl.extract_info(url, download=True)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏: <code>{e}</code>")
            return

        file_path = pick_first_file(tmpdir)
        if not file_path or not file_path.exists():
            await call.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
            return

        size = file_path.stat().st_size
        if size > TELEGRAM_BOT_FILE_LIMIT_MB * 1024 * 1024:
            title = (info2 or {}).get("title") or file_path.stem
            await call.message.edit_text(
                "‚ö†Ô∏è –§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n"
                "–°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∏–∂—á–∞ —è–∫—ñ—Å—Ç—å –∞–±–æ –∞—É–¥—ñ–æ).\n\n"
                f"<b>–ù–∞–∑–≤–∞:</b> {title}\n<b>–†–æ–∑–º—ñ—Ä:</b> {human_size(size)}\n"
                f"<b>–§–æ—Ä–º–∞—Ç:</b> {note}"
            )
            return

        caption = f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑: {bot}\n<b>–§–æ—Ä–º–∞—Ç:</b> {note}"
        try:
            if choice == "audio" or file_path.suffix.lower() in {".mp3", ".m4a"}:
                await bot.send_audio(
                    chat_id=call.message.chat.id,
                    audio=FSInputFile(str(file_path)),
                    caption=caption,
                    title=(info2 or {}).get("title"),
                    performer=(info2 or {}).get("uploader"),
                )
            else:
                await bot.send_video(
                    chat_id=call.message.chat.id,
                    video=FSInputFile(str(file_path)),
                    caption=caption,
                    supports_streaming=True,
                )
            await call.message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥—ñ—Å–ª–∞–≤ —Ñ–∞–π–ª –≤–∏—â–µ.")
        except Exception as e:
            await call.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É: <code>{e}</code>")


@dp.message()
async def on_other(message: Message):
    await message.reply(
        "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ YouTube –∞–±–æ TikTok.\n"
        "–ü—Ä–∏–∫–ª–∞–¥: https://youtu.be/dQw4w9WgXcQ"
    )


# -------------------- ENTRYPOINT --------------------
async def main():
    print("Bot is running...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

@dp.message()
async def on_other(message: Message):
    await message.reply(
        "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ YouTube –∞–±–æ TikTok.\n"
        "–ü—Ä–∏–∫–ª–∞–¥: https://youtu.be/dQw4w9WgXcQ"
    )


# -------------------- ENTRYPOINT --------------------
async def main():
    print("Bot is running...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
